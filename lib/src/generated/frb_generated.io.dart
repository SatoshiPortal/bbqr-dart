// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/error.dart';
import 'api/types.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class BbqrCoreApiImplPlatform extends BaseApiImpl<BbqrCoreWire> {
  BbqrCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JoinedPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_JoinedPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SplitPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_SplitPtr;

  @protected
  Joined
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
          dynamic raw);

  @protected
  Split
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
          dynamic raw);

  @protected
  Joined
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
          dynamic raw);

  @protected
  Split
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  DecodeError dco_decode_box_autoadd_decode_error(dynamic raw);

  @protected
  EncodeError dco_decode_box_autoadd_encode_error(dynamic raw);

  @protected
  HeaderParseError dco_decode_box_autoadd_header_parse_error(dynamic raw);

  @protected
  SplitOptions dco_decode_box_autoadd_split_options(dynamic raw);

  @protected
  DecodeError dco_decode_decode_error(dynamic raw);

  @protected
  EncodeError dco_decode_encode_error(dynamic raw);

  @protected
  Encoding dco_decode_encoding(dynamic raw);

  @protected
  FileType dco_decode_file_type(dynamic raw);

  @protected
  HeaderParseError dco_decode_header_parse_error(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  JoinError dco_decode_join_error(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  SplitError dco_decode_split_error(dynamic raw);

  @protected
  SplitOptions dco_decode_split_options(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  Version dco_decode_version(dynamic raw);

  @protected
  Joined
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
          SseDeserializer deserializer);

  @protected
  Split
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
          SseDeserializer deserializer);

  @protected
  Joined
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
          SseDeserializer deserializer);

  @protected
  Split
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  DecodeError sse_decode_box_autoadd_decode_error(SseDeserializer deserializer);

  @protected
  EncodeError sse_decode_box_autoadd_encode_error(SseDeserializer deserializer);

  @protected
  HeaderParseError sse_decode_box_autoadd_header_parse_error(
      SseDeserializer deserializer);

  @protected
  SplitOptions sse_decode_box_autoadd_split_options(
      SseDeserializer deserializer);

  @protected
  DecodeError sse_decode_decode_error(SseDeserializer deserializer);

  @protected
  EncodeError sse_decode_encode_error(SseDeserializer deserializer);

  @protected
  Encoding sse_decode_encoding(SseDeserializer deserializer);

  @protected
  FileType sse_decode_file_type(SseDeserializer deserializer);

  @protected
  HeaderParseError sse_decode_header_parse_error(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  JoinError sse_decode_join_error(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  SplitError sse_decode_split_error(SseDeserializer deserializer);

  @protected
  SplitOptions sse_decode_split_options(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  Version sse_decode_version(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_decode_error> cst_encode_box_autoadd_decode_error(
      DecodeError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_decode_error();
    cst_api_fill_to_wire_decode_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_encode_error> cst_encode_box_autoadd_encode_error(
      EncodeError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_encode_error();
    cst_api_fill_to_wire_encode_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_header_parse_error>
      cst_encode_box_autoadd_header_parse_error(HeaderParseError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_header_parse_error();
    cst_api_fill_to_wire_header_parse_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_split_options> cst_encode_box_autoadd_split_options(
      SplitOptions raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_split_options();
    cst_api_fill_to_wire_split_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_list_String(List<String> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_decode_error(
      DecodeError apiObj, ffi.Pointer<wire_cst_decode_error> wireObj) {
    cst_api_fill_to_wire_decode_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_encode_error(
      EncodeError apiObj, ffi.Pointer<wire_cst_encode_error> wireObj) {
    cst_api_fill_to_wire_encode_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_header_parse_error(
      HeaderParseError apiObj,
      ffi.Pointer<wire_cst_header_parse_error> wireObj) {
    cst_api_fill_to_wire_header_parse_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_split_options(
      SplitOptions apiObj, ffi.Pointer<wire_cst_split_options> wireObj) {
    cst_api_fill_to_wire_split_options(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_decode_error(
      DecodeError apiObj, wire_cst_decode_error wireObj) {
    if (apiObj is DecodeError_UnableToDecodeHex) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_String(apiObj.field1);
      wireObj.tag = 0;
      wireObj.kind.UnableToDecodeHex.field0 = pre_field0;
      wireObj.kind.UnableToDecodeHex.field1 = pre_field1;
      return;
    }
    if (apiObj is DecodeError_UnableToDecodeBase32) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_String(apiObj.field1);
      wireObj.tag = 1;
      wireObj.kind.UnableToDecodeBase32.field0 = pre_field0;
      wireObj.kind.UnableToDecodeBase32.field1 = pre_field1;
      return;
    }
    if (apiObj is DecodeError_UnableToInflateZlib) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.UnableToInflateZlib.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_encode_error(
      EncodeError apiObj, wire_cst_encode_error wireObj) {
    if (apiObj is EncodeError_Empty) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is EncodeError_CompressionError) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.CompressionError.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_header_parse_error(
      HeaderParseError apiObj, wire_cst_header_parse_error wireObj) {
    if (apiObj is HeaderParseError_Empty) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is HeaderParseError_InvalidEncoding) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.InvalidEncoding.field0 = pre_field0;
      return;
    }
    if (apiObj is HeaderParseError_InvalidFileType) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.InvalidFileType.field0 = pre_field0;
      return;
    }
    if (apiObj is HeaderParseError_InvalidFixedHeader) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is HeaderParseError_InvalidHeaderSize) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.InvalidHeaderSize.field0 = pre_field0;
      return;
    }
    if (apiObj is HeaderParseError_InvalidHeaderParts) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.InvalidHeaderParts.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_join_error(
      JoinError apiObj, wire_cst_join_error wireObj) {
    if (apiObj is JoinError_Empty) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is JoinError_ConflictingHeaders) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is JoinError_TooManyParts) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_usize(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind.TooManyParts.field0 = pre_field0;
      wireObj.kind.TooManyParts.field1 = pre_field1;
      return;
    }
    if (apiObj is JoinError_DuplicatePartWrongContent) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind.DuplicatePartWrongContent.field0 = pre_field0;
      return;
    }
    if (apiObj is JoinError_PartWithNoData) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.PartWithNoData.field0 = pre_field0;
      return;
    }
    if (apiObj is JoinError_MissingPart) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.MissingPart.field0 = pre_field0;
      return;
    }
    if (apiObj is JoinError_HeaderParseError) {
      var pre_field0 = cst_encode_box_autoadd_header_parse_error(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind.HeaderParseError.field0 = pre_field0;
      return;
    }
    if (apiObj is JoinError_DecodeError) {
      var pre_field0 = cst_encode_box_autoadd_decode_error(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind.DecodeError.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_split_error(
      SplitError apiObj, wire_cst_split_error wireObj) {
    if (apiObj is SplitError_Empty) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is SplitError_CannotFit) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is SplitError_MaxSplitSizeTooLarge) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.MaxSplitSizeTooLarge.field0 = pre_field0;
      return;
    }
    if (apiObj is SplitError_MinSplitTooSmall) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is SplitError_InvalidSplitRange) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is SplitError_InvalidVersionRange) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is SplitError_EncodeError) {
      var pre_field0 = cst_encode_box_autoadd_encode_error(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind.EncodeError.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_split_options(
      SplitOptions apiObj, wire_cst_split_options wireObj) {
    wireObj.encoding = cst_encode_encoding(apiObj.encoding);
    wireObj.min_split_number = cst_encode_usize(apiObj.minSplitNumber);
    wireObj.max_split_number = cst_encode_usize(apiObj.maxSplitNumber);
    wireObj.min_version = cst_encode_version(apiObj.minVersion);
    wireObj.max_version = cst_encode_version(apiObj.maxVersion);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
      Joined raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
      Split raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
      Joined raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
      Split raw);

  @protected
  int cst_encode_encoding(Encoding raw);

  @protected
  int cst_encode_file_type(FileType raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  int cst_encode_version(Version raw);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
          Joined self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
          Split self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Joined(
          Joined self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLock_Split(
          Split self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_decode_error(
      DecodeError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_encode_error(
      EncodeError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_header_parse_error(
      HeaderParseError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_split_options(
      SplitOptions self, SseSerializer serializer);

  @protected
  void sse_encode_decode_error(DecodeError self, SseSerializer serializer);

  @protected
  void sse_encode_encode_error(EncodeError self, SseSerializer serializer);

  @protected
  void sse_encode_encoding(Encoding self, SseSerializer serializer);

  @protected
  void sse_encode_file_type(FileType self, SseSerializer serializer);

  @protected
  void sse_encode_header_parse_error(
      HeaderParseError self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_join_error(JoinError self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_split_error(SplitError self, SseSerializer serializer);

  @protected
  void sse_encode_split_options(SplitOptions self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_version(Version self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BbqrCoreWire implements BaseWire {
  factory BbqrCoreWire.fromExternalLibrary(ExternalLibrary lib) =>
      BbqrCoreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BbqrCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BbqrCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
